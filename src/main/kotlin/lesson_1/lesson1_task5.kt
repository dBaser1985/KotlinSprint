package org.example.lesson_1

fun main() {

    /*    Задача 5* к Уроку 1

    Объяви переменную с количеством секунд, которые Гагарин провел в космосе.

    - Переведи в коде количество секунд в целые минуты и целые часы, сохраняя остаток секунд и минут в новые переменные;
    - Выведи в консоль время, проведенное в космосе в формате [часы:минуты:секунды], например так: 01:30:09;
    - Значения часов, минут и секунд отображать двумя цифрами.
     */

    /* Алгоритм решения:
    1. Задаем переменную с исходным общим количеством секунд
    2. Получаем целое количество часов поделив исходные секунды на количество секунд в часе (60*60=3600)
    3. Получаем количество минут - остаток от деления на количество часов делим на колво секунд в минуте
    4. Получаем секунды - остаток от деления при получении минут
    5. Выполняем форматированный вывод результата
     */

    val totalSecondsInSpace = 123456

    val hoursInSpace        = totalSecondsInSpace / 3600
    val remainingSeconds    = totalSecondsInSpace % 3600

    val minutesInSpace      = remainingSeconds / 60
    val secondsInSpace      = remainingSeconds % 60

    //println("$hoursInSpace:$minutesInSpace:$secondsInSpace")  //тестовый вывод расчетов без форматирования
    // Выводим время в формате [часы:минуты:секунды]
    //println("${hoursInSpace.toString().padStart(2, '0')}:${minutesInSpace.toString().padStart(2,'0')}:${secondsInSpace.toString().padStart(2,'0')}")
    println("%02d:%02d:%02d".format(hoursInSpace, minutesInSpace, secondsInSpace))

}


/////////////////////////////////////////////////////////////////////////////////
/*  Сохраню справочку по форматированию.

    В Kotlin, как и в других языках, для форматирования строк используется шаблонный синтаксис.
    Он позволяет вставлять значения переменных в строку с определённым форматом. В частности,
    для чисел и других типов данных можно использовать различные спецификаторы форматирования.

### Основные шаблоны форматирования в Kotlin:

1. **`%d` — целое число (decimal)**
   - Применяется для целых чисел.
   - Пример: `"%d".format(42)` → `"42"`

2. **`%f` — число с плавающей точкой (float/double)**
   - Применяется для чисел с плавающей точкой.
   - По умолчанию выводит 6 знаков после запятой.
   - Пример: `"%f".format(3.1415926535)` → `"3.141593"`

   Чтобы контролировать количество знаков после запятой, можно указать точность:
   - Пример: `"%.2f".format(3.1415926535)` → `"3.14"` (округляется до 2 знаков после запятой)

3. **`%s` — строка (string)**
   - Применяется для строк.
   - Пример: `"%s".format("Hello")` → `"Hello"`

4. **`%c` — символ (character)**
   - Применяется для одного символа.
   - Пример: `"%c".format('A')` → `"A"`

5. **`%x` — шестнадцатеричное число (hexadecimal)**
   - Применяется для целых чисел, выводит число в шестнадцатеричной системе.
   - Пример: `"%x".format(255)` → `"ff"`

6. **`%o` — восьмеричное число (octal)**
   - Применяется для целых чисел, выводит число в восьмеричной системе.
   - Пример: `"%o".format(8)` → `"10"`

7. **`%e` — экспоненциальная запись**
   - Применяется для чисел с плавающей точкой, выводит их в экспоненциальной записи.
   - Пример: `"%e".format(1234567.89)` → `"1.234568e+06"`

8. **`%g` — более компактная форма для чисел с плавающей точкой**
   - Использует экспоненциальную запись, если число слишком большое или слишком маленькое, и обычную запись для более удобных чисел.
   - Пример: `"%.3g".format(12345.6789)` → `"12300"`

9. **`%t` — дата и время**
   - Применяется для форматирования дат и времени.
   - Пример: `"%tT".format(System.currentTimeMillis())` → `"12:34:56"` (время)
   - Подробнее о форматировании времени — это отдельная тема, в Kotlin можно использовать `SimpleDateFormat`.

### Пример использования с дополнительными модификаторами:

1. **Ширина поля:**
   Вы можете указать минимальную ширину поля для вывода числа или строки. Если число или строка короче, будет добавлено пространство (по умолчанию — пробелы).

   Пример:
   ```kotlin
   "%5d".format(42)    // Результат: "   42" (ширина 5, число выровнено по правому краю)
   "%5s".format("Hi")  // Результат: "   Hi" (ширина 5, строка выровнена по правому краю)
   ```

2. **Заполнение нулями:**
   Чтобы заполнять пустые места нулями, используйте `0` перед шириной:

   Пример:
   ```kotlin
   "%05d".format(42)   // Результат: "00042"
   "%05s".format("Hi") // Результат: "000Hi"
   ```

3. **Точность для чисел с плавающей точкой:**
   Для чисел с плавающей точкой можно указать точность (сколько знаков после запятой):

   Пример:
   ```kotlin
   "%.2f".format(3.141592)   // Результат: "3.14"
   "%.3f".format(3.141592)   // Результат: "3.142"
   ```

4. **Модификатор выравнивания:**
   Чтобы выровнять значение по левому краю, можно использовать минус перед шириной:

   Пример:
   ```kotlin
   "%-5d".format(42)  // Результат: "42   " (выравнивание по левому краю)
   "%-5s".format("Hi") // Результат: "Hi   " (выравнивание по левому краю)
   ```

### Пример комбинированного форматирования:

```kotlin
fun main() {
    val hours = 3
    val minutes = 9
    val seconds = 5
    val pi = 3.1415926535
    val name = "Gagarin"

    // Форматирование времени в формате [часы:минуты:секунды]
    val timeFormatted = "%02d:%02d:%02d".format(hours, minutes, seconds)
    println("Time in space: $timeFormatted") // Выведет: "03:09:05"

    // Форматирование числа с плавающей точкой
    val piFormatted = "%.3f".format(pi)
    println("Pi value: $piFormatted") // Выведет: "3.142"

    // Форматирование строки
    val nameFormatted = "%-10s".format(name)
    println("Astronaut: $nameFormatted") // Выведет: "Astronaut: Gagarin    "
}
```

### Резюме:
Шаблоны форматирования в Kotlin дают гибкость в отображении данных в строках. Вы можете контролировать:
- Вид чисел (десятичные, экспоненциальные, шестнадцатеричные и т. д.),
- Число знаков после запятой,
- Выравнивание и заполнение строк или чисел.

*/